output_dir <- file.path(repo_dir, "gard_mapping/clade_assignments")
bam_path <-file.path("/Users/hlberman/mnt/cluster/home/hlberman/VMMG/gard_map/filtered_out")
bamFiles <- list.files(bam_path, pattern = "_FgardRef_s.bam$", full.names = TRUE)
bamList <- map(bamFiles, BamFile)
bamList
names(bamList) <- list.files(bam_path, pattern = "_FgardRef_s.bam$", full.names = FALSE) %>%
str_sub(1,10)
remove.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
names(bamList) <- list.files(bam_path, pattern = "_FgardRef_s.bam$", full.names = FALSE) %>%
str_sub(1,10)
y
library(tidyverse); packageVersion("tidyverse")
names(bamList) <- list.files(bam_path, pattern = "_FgardRef_s.bam$", full.names = FALSE) %>%
str_sub(1,10)
alns <- map(bamList, readGAlignments)
library(GenomicAlignments);packageVersion("GenomicAlignments")
alns <- map(bamList, readGAlignments)
save(alns, file = file.path(output_dir, "gardRefBamAlns.RData"))
library(tidyverse); packageVersion("tidyverse")
library(GenomicAlignments);packageVersion("GenomicAlignments")
library(rlist);packageVersion("rlist")
repo_dir <- "/Users/hlberman/Documents/GitHub/pregnancy_metagenome/"
gard_tree_dir <- "/Volumes/GoogleDrive/My Drive/Callahan Lab/Gard WGS"
output_dir <- file.path(repo_dir, "gard_mapping/clade_assignments/")
df_path <- file.path(repo_dir, "shotgunMetadata.tsv")
ref_df_path <- file.path(repo_dir, "GardnerellaMetadata.csv")
genomeAlns_path <- file.path(repo_dir, "gard_mapping/clade_assignments/gardRefBamAlns.RData")
load(file = genomeAlns_path)
refDF <- read_csv(ref_df_path)
sgDF <- read_delim(df_path, delim="\t")
alns[1]
repo_dir <- "/Users/hlberman/Documents/GitHub/pregnancy_metagenome/"
output_dir <- file.path(repo_dir, "gard_mapping/clade_assignments")
bam_path <-file.path("/Users/hlberman/mnt/cluster/home/hlberman/VMMG/gard_map/filtered_out")
#list bam files
bamFiles <- list.files(bam_path, pattern = "_FgardRef_s.bam$", full.names = TRUE)
#make list of bam file objects
bamList <- map(bamFiles, BamFile)
names(bamList) <- list.files(bam_path, pattern = "_FgardRef_s.bam$", full.names = FALSE) %>%
str_sub(1,10)
#make alignment objects
alns <- map(bamList, readGAlignments)
bamFiles <- list.files(bam_path, pattern = "_FgardRef_s.bam$", full.names = TRUE)
bamFiles
bamList <- map(bamFiles, BamFile)
names(bamList) <- list.files(bam_path, pattern = "_FgardRef_s.bam$", full.names = FALSE) %>%
str_sub(1,10)
alns <- map(bamList, readGAlignments)
alns
remove.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
bamList <- map(bamFiles, BamFile)
library(tidyverse); packageVersion("tidyverse")
bamList <- map(bamFiles, BamFile)
bamFiles <- list.files(bam_path, pattern = "_FgardRef_s.bam$", full.names = TRUE)
library(GenomicAlignments);packageVersion("GenomicAlignments")
bamList <- map(bamFiles, BamFile)
names(bamList) <- list.files(bam_path, pattern = "_FgardRef_s.bam$", full.names = FALSE) %>%
str_sub(1,10)
alns <- map(bamList, readGAlignments)
alns[1]
alns2 <- map(bamList, scanBam)
alns2[1]
alns0 <- map(bamList, readGAlignmentPairs)
alnGenes <- alns0 %>%  #make dfs of genes mapped in each sample
map(seqnames) %>%
map(as.data.frame)
names(alnGenes) <- names(alns0)
countStrains <- alnGenes %>%  #get just strains mapped in each sample
map(~mutate(.x, value=str_sub(.x$value, 1L, -7L))) %>% #remove gene identifiers so that only strains appear
map(~dplyr::count(.x, value)) %>% #get counts of strains
purrr::reduce(full_join, by="value") %>% #make on data frame
dplyr::rename(Strain=value) %>%
left_join(., refDF[,c("Strain", "Group")], by = "Strain") #add group
colnames(countStrains) <- c("refStrain", names(alns), "Clade")
countClades <- countStrains %>%  #get reads mapped to each clade
select(-refStrain) %>%
group_by(Clade) %>%
summarise_all(funs(sum), na.rm=TRUE) %>%
gather("SampleID", "n", 2:108) %>%
mutate(Subject=str_sub(SampleID, 1, 5),
Clade=as.character(Clade),
SampleID=as.numeric(as.character(SampleID))) %>%
left_join(sgDF[,c("SampleID", "GWcoll")], by="SampleID")
countClades0 <- countClades %>%
spread(Clade, n)
countClades1 <- countClades %>% #make read counts into proportion
group_by(SampleID) %>%
mutate(n=n/sum(n))
maxClade <- countClades %>%
aggregate(n~SampleID, ., max) %>%
filter(n>0)%>%
inner_join(countClades, by = c("SampleID", "n"))
setdiff(sgDF$SampleID, maxClade$SampleID)
alnGenes <- alns0 %>%  #make dfs of genes mapped in each sample
map(seqnames) %>%
map(as.data.frame)
names(alnGenes) <- names(alns0)
countStrains <- alnGenes %>%  #get just strains mapped in each sample
map(~mutate(.x, value=str_sub(.x$value, 1L, -7L))) %>% #remove gene identifiers so that only strains appear
map(~dplyr::count(.x, value)) %>% #get counts of strains
purrr::reduce(full_join, by="value") %>% #make on data frame
dplyr::rename(Strain=value) %>%
left_join(., refDF[,c("Strain", "Group")], by = "Strain") #add group
colnames(countStrains) <- c("refStrain", names(alns), "Clade")
countClades <- countStrains %>%  #get reads mapped to each clade
select(-refStrain) %>%
group_by(Clade) %>%
summarise_all(list(name=~sum), na.rm=TRUE) %>%
gather("SampleID", "n", 2:108) %>%
mutate(Subject=str_sub(SampleID, 1, 5),
Clade=as.character(Clade),
SampleID=as.numeric(as.character(SampleID))) %>%
left_join(sgDF[,c("SampleID", "GWcoll")], by="SampleID")
countClades0 <- countClades %>%
spread(Clade, n)
alnGenes <- alns0 %>%  #make dfs of genes mapped in each sample
map(seqnames) %>%
map(as.data.frame)
names(alnGenes) <- names(alns0)
countStrains <- alnGenes %>%  #get just strains mapped in each sample
map(~mutate(.x, value=str_sub(.x$value, 1L, -7L))) %>% #remove gene identifiers so that only strains appear
map(~dplyr::count(.x, value)) %>% #get counts of strains
purrr::reduce(full_join, by="value") %>% #make on data frame
dplyr::rename(Strain=value) %>%
left_join(., refDF[,c("Strain", "Group")], by = "Strain") #add group
colnames(countStrains) <- c("refStrain", names(alns), "Clade")
countClades <- countStrains %>%  #get reads mapped to each clade
select(-refStrain) %>%
group_by(Clade) %>%
summarise_all(list(sum), na.rm=TRUE) %>%
gather("SampleID", "n", 2:108) %>%
mutate(Subject=str_sub(SampleID, 1, 5),
Clade=as.character(Clade),
SampleID=as.numeric(as.character(SampleID))) %>%
left_join(sgDF[,c("SampleID", "GWcoll")], by="SampleID")
countClades0 <- countClades %>%
spread(Clade, n)
countClades1 <- countClades %>% #make read counts into proportion
group_by(SampleID) %>%
mutate(n=n/sum(n))
maxClade <- countClades %>%
aggregate(n~SampleID, ., max) %>%
filter(n>0)%>%
inner_join(countClades, by = c("SampleID", "n"))
setdiff(sgDF$SampleID, maxClade$SampleID)
alnGenes <- alns0 %>%  #make dfs of genes mapped in each sample
map(seqnames) %>%
map(as.data.frame)
names(alnGenes) <- names(alns0)
countStrainsP <- alnGenes %>%  #get just strains mapped in each sample
map(~mutate(.x, value=str_sub(.x$value, 1L, -7L))) %>% #remove gene identifiers so that only strains appear
map(~dplyr::count(.x, value)) %>% #get counts of strains
purrr::reduce(full_join, by="value") %>% #make on data frame
dplyr::rename(Strain=value) %>%
left_join(., refDF[,c("Strain", "Group")], by = "Strain") #add group
colnames(countStrains) <- c("refStrain", names(alns), "Clade")
countCladesP <- countStrainsP %>%  #get reads mapped to each clade
select(-refStrain) %>%
group_by(Clade) %>%
summarise_all(list(sum), na.rm=TRUE) %>%
gather("SampleID", "n", 2:108) %>%
mutate(Subject=str_sub(SampleID, 1, 5),
Clade=as.character(Clade),
SampleID=as.numeric(as.character(SampleID))) %>%
left_join(sgDF[,c("SampleID", "GWcoll")], by="SampleID")
alnGenesP <- alns0 %>%  #make dfs of genes mapped in each sample
map(seqnames) %>%
map(as.data.frame)
names(alnGenesP) <- names(alns0)
countStrainsP <- alnGenesP %>%  #get just strains mapped in each sample
map(~mutate(.x, value=str_sub(.x$value, 1L, -7L))) %>% #remove gene identifiers so that only strains appear
map(~dplyr::count(.x, value)) %>% #get counts of strains
purrr::reduce(full_join, by="value") %>% #make on data frame
dplyr::rename(Strain=value) %>%
left_join(., refDF[,c("Strain", "Group")], by = "Strain") #add group
colnames(countStrains) <- c("refStrain", names(alns), "Clade")
countCladesP <- countStrainsP %>%  #get reads mapped to each clade
select(-refStrain) %>%
group_by(Clade) %>%
summarise_all(list(sum), na.rm=TRUE) %>%
gather("SampleID", "n", 2:108) %>%
mutate(Subject=str_sub(SampleID, 1, 5),
Clade=as.character(Clade),
SampleID=as.numeric(as.character(SampleID))) %>%
left_join(sgDF[,c("SampleID", "GWcoll")], by="SampleID")
alnGenesP <- alns0 %>%  #make dfs of genes mapped in each sample
map(seqnames) %>%
map(as.data.frame)
names(alnGenesP) <- names(alns0)
countStrainsP <- alnGenesP %>%  #get just strains mapped in each sample
map(~mutate(.x, value=str_sub(.x$value, 1L, -7L))) %>% #remove gene identifiers so that only strains appear
map(~dplyr::count(.x, value)) %>% #get counts of strains
purrr::reduce(full_join, by="value") %>% #make on data frame
dplyr::rename(Strain=value) %>%
left_join(., refDF[,c("Strain", "Group")], by = "Strain") #add group
colnames(countStrainsP) <- c("refStrain", names(alns), "Clade")
countCladesP <- countStrainsP %>%  #get reads mapped to each clade
select(-refStrain) %>%
group_by(Clade) %>%
summarise_all(list(sum), na.rm=TRUE) %>%
gather("SampleID", "n", 2:108) %>%
mutate(Subject=str_sub(SampleID, 1, 5),
Clade=as.character(Clade),
SampleID=as.numeric(as.character(SampleID))) %>%
left_join(sgDF[,c("SampleID", "GWcoll")], by="SampleID")
countCladesP0 <- countClades %>%
spread(Clade, n)
countCladesP1 <- countClades %>% #make read counts into proportion
group_by(SampleID) %>%
mutate(n=n/sum(n))
maxCladeP <- countClades %>%
aggregate(n~SampleID, ., max) %>%
filter(n>0)%>%
inner_join(countClades, by = c("SampleID", "n"))
setdiff(sgDF$SampleID, maxClade$SampleID)
alnGenes <- alns %>%  #make dfs of genes mapped in each sample
map(seqnames) %>%
map(as.data.frame)
names(alnGenes) <- names(alns)
countStrains <- alnGenes %>%  #get just strains mapped in each sample
map(~mutate(.x, value=str_sub(.x$value, 1L, -7L))) %>% #remove gene identifiers so that only strains appear
map(~dplyr::count(.x, value)) %>% #get counts of strains
purrr::reduce(full_join, by="value") %>% #make on data frame
dplyr::rename(Strain=value) %>%
left_join(., refDF[,c("Strain", "Group")], by = "Strain") #add group
colnames(countStrains) <- c("refStrain", names(alns), "Clade")
countClades <- countStrains %>%  #get reads mapped to each clade
select(-refStrain) %>%
group_by(Clade) %>%
summarise_all(funs(sum), na.rm=TRUE) %>%
gather("SampleID", "n", 2:108) %>%
mutate(Subject=str_sub(SampleID, 1, 5),
Clade=as.character(Clade),
SampleID=as.numeric(as.character(SampleID))) %>%
left_join(sgDF[,c("SampleID", "GWcoll")], by="SampleID")
countClades0 <- countClades %>%
spread(Clade, n)
countClades1 <- countClades %>% #make read counts into proportion
group_by(SampleID) %>%
mutate(n=n/sum(n))
maxClade <- countClades %>%
aggregate(n~SampleID, ., max) %>%
filter(n>0)%>%
inner_join(countClades, by = c("SampleID", "n"))
setdiff(sgDF$SampleID, maxClade$SampleID)
View(maxClade)
View(maxCladeP)
readGAlignmentPairs()
?readGAlignmentPairs()
?readGAlignmentPairs
alns0[1]
repo_dir <- "/Users/hlberman/Documents/GitHub/pregnancy_metagenome/"
output_dir <- file.path(repo_dir, "gard_mapping/clade_assignments")
bam_path <-file.path("/Users/hlberman/mnt/cluster/home/hlberman/VMMG/gard_map/filtered_out")
#list bam files
bamFiles <- list.files(bam_path, pattern = "_FgardRef_s.bam$", full.names = TRUE)
#make list of bam file objects
bamList <- map(bamFiles, BamFile)
names(bamList) <- list.files(bam_path, pattern = "_FgardRef_s.bam$", full.names = FALSE) %>%
str_sub(1,10)
#make alignment objects
alns <- map(bamList, readGAlignmentsPairs)
library(GenomicAlignments);packageVersion("GenomicAlignments")
alns <- map(bamList, readGAlignmentsPairs)
alns <- map(bamList, readGAlignmentPairs)
alnsSB <- map(bamList, scanBam)
save(alns, file = file.path(output_dir, "gardRefBamAlns.RData"))
save(alnsSB, file = file.path(output_dir, "gardRefBamAlnsSB.RData"))
sessionInfo()
alnGenes <- alns %>%  #make dfs of genes mapped in each sample
map(seqnames) %>%
map(as.data.frame)
names(alnGenes) <- names(alns)
countStrains <- alnGenes %>%  #get just strains mapped in each sample
map(~mutate(.x, value=str_sub(.x$value, 1L, -7L))) %>% #remove gene identifiers so that only strains appear
map(~dplyr::count(.x, value)) %>% #get counts of strains
purrr::reduce(full_join, by="value") %>% #make on data frame
dplyr::rename(Strain=value) %>%
left_join(., refDF[,c("Strain", "Group")], by = "Strain") #add group
colnames(countStrains) <- c("refStrain", names(alns), "Clade")
countClades <- countStrains %>%  #get reads mapped to each clade
select(-refStrain) %>%
group_by(Clade) %>%
summarise_all(funs(sum), na.rm=TRUE) %>%
gather("SampleID", "n", 2:108) %>%
mutate(Subject=str_sub(SampleID, 1, 5),
Clade=as.character(Clade),
SampleID=as.numeric(as.character(SampleID))) %>%
left_join(sgDF[,c("SampleID", "GWcoll")], by="SampleID")
countClades0 <- countClades %>%
spread(Clade, n)
countClades1 <- countClades %>% #make read counts into proportion
group_by(SampleID) %>%
mutate(n=n/sum(n))
maxClade <- countClades %>%
aggregate(n~SampleID, ., max) %>%
filter(n>0)%>%
inner_join(countClades, by = c("SampleID", "n"))
setdiff(sgDF$SampleID, maxClade$SampleID)
ggplot(data=countClades1, aes(x=GWcoll, y=n, color = Clade)) +
geom_point()+
geom_jitter()+
facet_wrap(~Subject) +
labs(y="Proportion reads mapped to clade", x="Gestation Weeks")+
theme(axis.text.y = element_text(size=7))
ggplot(data=countClades1, aes(x=GWcoll, y=n, color = Clade, fill=Clade)) +
geom_bar(position="stack", stat = "identity", width =2) +
facet_wrap(~Subject) +
labs(y="Proportion reads mapped to clade", x="Gestation Weeks")+
theme(axis.text.y = element_text(size=7))
countStrains <- alnGenes %>%  #get just strains mapped in each sample
map(~mutate(.x, value=str_sub(.x$value, 1L, -7L))) %>% #remove gene identifiers so that only strains appear
map(~dplyr::count(.x, value)) %>% #get counts of strains
purrr::reduce(full_join, by="value") %>% #make on data frame
dplyr::rename(Strain=value) %>%
left_join(., refDF[,c("Strain", "Group")], by = "Strain") #add group
colnames(countStrains) <- c("refStrain", names(alns), "Clade")
View(countStrains)
countClades <- countStrains %>%  #get reads mapped to each clade
select(-refStrain) %>%
group_by(Clade) %>%
summarise_all(funs(sum), na.rm=TRUE) %>%
gather("SampleID", "n", 2:108) %>%
mutate(Subject=str_sub(SampleID, 1, 5),
Clade=as.character(Clade),
SampleID=as.numeric(as.character(SampleID))) %>%
left_join(sgDF[,c("SampleID", "GWcoll")], by="SampleID")
View(countClades)
countClades <- countStrains %>%  #get reads mapped to each clade
select(-refStrain) %>%
group_by(Clade) %>%
summarise_all(funs(sum), na.rm=TRUE) %>%
gather("SampleID", "n", 2:108) %>%
mutate(Subject=str_sub(SampleID, 1, 5),
Clade=as.character(Clade),
SampleID=as.numeric(as.character(SampleID))) %>%
left_join(sgDF[,c("SampleID", "GWcoll")], by="SampleID") %>%
filter(is.na(Clade))
countClades <- countStrains %>%  #get reads mapped to each clade
select(-refStrain) %>%
group_by(Clade) %>%
summarise_all(funs(sum), na.rm=TRUE) %>%
gather("SampleID", "n", 2:108) %>%
mutate(Subject=str_sub(SampleID, 1, 5),
Clade=as.character(Clade),
SampleID=as.numeric(as.character(SampleID))) %>%
left_join(sgDF[,c("SampleID", "GWcoll")], by="SampleID") %>%
filter(Clade=is.na(Clade))
countClades <- countStrains %>%  #get reads mapped to each clade
select(-refStrain) %>%
group_by(Clade) %>%
summarise_all(funs(sum), na.rm=TRUE) %>%
gather("SampleID", "n", 2:108) %>%
mutate(Subject=str_sub(SampleID, 1, 5),
Clade=as.character(Clade),
SampleID=as.numeric(as.character(SampleID))) %>%
left_join(sgDF[,c("SampleID", "GWcoll")], by="SampleID") %>%
filter(Clade>4,
Clade<0)
countClades <- countStrains %>%  #get reads mapped to each clade
select(-refStrain) %>%
group_by(Clade) %>%
summarise_all(funs(sum), na.rm=TRUE) %>%
gather("SampleID", "n", 2:108) %>%
mutate(Subject=str_sub(SampleID, 1, 5),
Clade=as.character(Clade),
SampleID=as.numeric(as.character(SampleID))) %>%
left_join(sgDF[,c("SampleID", "GWcoll")], by="SampleID") %>%
filter(Clade!="0"|"1"|"2"|"3"|"4")
countClades <- countStrains %>%  #get reads mapped to each clade
select(-refStrain) %>%
group_by(Clade) %>%
summarise_all(funs(sum), na.rm=TRUE) %>%
gather("SampleID", "n", 2:108) %>%
mutate(Subject=str_sub(SampleID, 1, 5),
Clade=as.character(Clade),
SampleID=as.numeric(as.character(SampleID))) %>%
left_join(sgDF[,c("SampleID", "GWcoll")], by="SampleID") %>%
filter(Clade!="0"|Clade!="1"|Clade!="2"|Clade!="3"|Calde!="4")
countClades <- countStrains %>%  #get reads mapped to each clade
select(-refStrain) %>%
group_by(Clade) %>%
summarise_all(funs(sum), na.rm=TRUE) %>%
gather("SampleID", "n", 2:108) %>%
mutate(Subject=str_sub(SampleID, 1, 5),
Clade=as.character(Clade),
SampleID=as.numeric(as.character(SampleID))) %>%
left_join(sgDF[,c("SampleID", "GWcoll")], by="SampleID") %>%
filter(Clade!="0"|Clade!="1"|Clade!="2"|Clade!="3"|Clade!="4")
countClades0 <- countClades %>%
spread(Clade, n)
countClades1 <- countClades %>% #make read counts into proportion
group_by(SampleID) %>%
mutate(n=n/sum(n))
maxClade <- countClades %>%
aggregate(n~SampleID, ., max) %>%
filter(n>0)%>%
inner_join(countClades, by = c("SampleID", "n"))
setdiff(sgDF$SampleID, maxClade$SampleID)
sum(countClades1) == length(unique(countClades1$SampleID))
sum(countClades1$n) == length(unique(countClades1$SampleID))
sum(countClades1$n) == 95
sum(countClades1$n)
sum(countClades1$n, na.rm=TRUE) == length(unique(countClades1$SampleID))
alnGenes <- alns %>%  #make dfs of genes mapped in each sample
map(seqnames) %>%
map(as.data.frame)
names(alnGenes) <- names(alns)
countStrains <- alnGenes %>%  #get just strains mapped in each sample
map(~mutate(.x, value=str_sub(.x$value, 1L, -7L))) %>% #remove gene identifiers so that only strains appear
map(~dplyr::count(.x, value)) %>% #get counts of strains
purrr::reduce(full_join, by="value") %>% #make on data frame
dplyr::rename(Strain=value) %>%
left_join(., refDF[,c("Strain", "Group")], by = "Strain") #add group
colnames(countStrains) <- c("refStrain", names(alns), "Clade")
countClades <- countStrains %>%  #get reads mapped to each clade
select(-refStrain) %>%
group_by(Clade) %>%
summarise_all(funs(sum), na.rm=TRUE) %>%
gather("SampleID", "n", 2:108) %>%
mutate(Subject=str_sub(SampleID, 1, 5),
Clade=as.character(Clade),
SampleID=as.numeric(as.character(SampleID))) %>%
left_join(sgDF[,c("SampleID", "GWcoll")], by="SampleID") %>%
filter(Clade!="0"|Clade!="1"|Clade!="2"|Clade!="3"|Clade!="4")
countClades0 <- countClades %>%
spread(Clade, n)
countClades1 <- countClades %>% #make read counts into proportion
group_by(SampleID) %>%
mutate(n=n/sum(n))
sum(countClades1$n, na.rm=TRUE)
maxClade <- countClades %>%
aggregate(n~SampleID, ., max) %>%
filter(n>0)%>%
inner_join(countClades, by = c("SampleID", "n"))
setdiff(sgDF$SampleID, maxClade$SampleID)
sum(countClades1$n, na.rm=TRUE) == nrow(maxClade) #check that sample sums are the number of samples for which reads mapped to reference genes
sum(countClades1, na.rm = TRUE)
sum(countClades1$n, na.rm = TRUE)
107-13
View(maxClade)
alnGenes <- alns %>%  #make dfs of genes mapped in each sample
map(seqnames) %>%
map(as.data.frame)
names(alnGenes) <- names(alns)
countStrains <- alnGenes %>%  #get just strains mapped in each sample
map(~mutate(.x, value=str_sub(.x$value, 1L, -7L))) %>% #remove gene identifiers so that only strains appear
map(~dplyr::count(.x, value)) %>% #get counts of strains
purrr::reduce(full_join, by="value") %>% #make on data frame
dplyr::rename(Strain=value) %>%
left_join(., refDF[,c("Strain", "Group")], by = "Strain") #add group
colnames(countStrains) <- c("refStrain", names(alns), "Clade")
countClades <- countStrains %>%  #get reads mapped to each clade
select(-refStrain) %>%
group_by(Clade) %>%
summarise_all(funs(sum), na.rm=TRUE) %>%
gather("SampleID", "n", 2:108) %>%
mutate(Subject=str_sub(SampleID, 1, 5),
Clade=as.character(Clade),
SampleID=as.numeric(as.character(SampleID))) %>%
left_join(sgDF[,c("SampleID", "GWcoll")], by="SampleID") %>%
filter(Clade!="0"|Clade!="1"|Clade!="2"|Clade!="3"|Clade!="4")
countClades0 <- countClades %>%
spread(Clade, n)
countClades1 <- countClades %>% #make read counts into proportion
group_by(SampleID) %>%
mutate(n=n/sum(n))
maxClade <- countClades %>%
aggregate(n~SampleID, ., max) %>%
filter(n>0)%>%
inner_join(countClades, by = c("SampleID", "n"))
setdiff(sgDF$SampleID, maxClade$SampleID)
sum(countClades1$n, na.rm=TRUE) == nrow(maxClade) #check that sample sums are the number of samples for which reads mapped to reference genes
countClades <- countStrains %>%  #get reads mapped to each clade
select(-refStrain) %>%
group_by(Clade) %>%
summarise_all(funs(sum), na.rm=TRUE) %>%
gather("SampleID", "n", 2:108) %>%
mutate(Subject=str_sub(SampleID, 1, 5),
Clade=as.character(Clade),
SampleID=as.numeric(as.character(SampleID))) %>%
left_join(sgDF[,c("SampleID", "GWcoll")], by="SampleID") #%>%
countClades <- countStrains %>%  #get reads mapped to each clade
select(-refStrain) %>%
group_by(Clade) %>%
summarise_all(funs(sum), na.rm=TRUE) %>%
gather("SampleID", "n", 2:108) %>%
mutate(Subject=str_sub(SampleID, 1, 5),
Clade=as.character(Clade),
SampleID=as.numeric(as.character(SampleID))) %>%
left_join(sgDF[,c("SampleID", "GWcoll")], by="SampleID") %>%
filter(Clade!="0"|Clade!="1"|Clade!="2"|Clade!="3"|Clade!="4")
countClades0 <- countClades %>%
spread(Clade, n)
View(countClades0)
ggplot(data=countClades1, aes(x=GWcoll, y=n, color = Clade)) +
geom_point()+
geom_jitter()+
facet_wrap(~Subject) +
labs(y="Proportion reads mapped to clade", x="Gestation Weeks")+
theme(axis.text.y = element_text(size=7))
ggplot(data=countClades1, aes(x=GWcoll, y=n, color = Clade, fill=Clade)) +
geom_bar(position="stack", stat = "identity", width =2) +
facet_wrap(~Subject) +
labs(y="Proportion reads mapped to clade", x="Gestation Weeks")+
theme(axis.text.y = element_text(size=7))
vignette(package="GenomicRanges")
vignette(package="GenomicRanges", "GenomicRangesIntroduction")
